# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/Users/hgiesel/Developer/repos/anki_search_bar/designer/settings.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Settings(object):
    def setupUi(self, Settings):
        Settings.setObjectName("Settings")
        Settings.resize(375, 209)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Settings.sizePolicy().hasHeightForWidth())
        Settings.setSizePolicy(sizePolicy)
        self.gridLayout = QtWidgets.QGridLayout(Settings)
        self.gridLayout.setObjectName("gridLayout")
        self.shortcutOpenBrowser = QtWidgets.QKeySequenceEdit(Settings)
        self.shortcutOpenBrowser.setObjectName("shortcutOpenBrowser")
        self.gridLayout.addWidget(self.shortcutOpenBrowser, 1, 1, 1, 1)
        self.buttonBox = QtWidgets.QDialogButtonBox(Settings)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.gridLayout.addWidget(self.buttonBox, 5, 1, 1, 2)
        self.shortcutOpen = QtWidgets.QKeySequenceEdit(Settings)
        self.shortcutOpen.setObjectName("shortcutOpen")
        self.gridLayout.addWidget(self.shortcutOpen, 0, 1, 1, 1)
        self.labelOpen = QtWidgets.QLabel(Settings)
        self.labelOpen.setObjectName("labelOpen")
        self.gridLayout.addWidget(self.labelOpen, 0, 0, 1, 1)
        self.labelNext = QtWidgets.QLabel(Settings)
        self.labelNext.setObjectName("labelNext")
        self.gridLayout.addWidget(self.labelNext, 3, 0, 1, 1)
        self.labelOpenBrowser = QtWidgets.QLabel(Settings)
        self.labelOpenBrowser.setObjectName("labelOpenBrowser")
        self.gridLayout.addWidget(self.labelOpenBrowser, 1, 0, 1, 1)
        self.labelPrevious = QtWidgets.QLabel(Settings)
        self.labelPrevious.setObjectName("labelPrevious")
        self.gridLayout.addWidget(self.labelPrevious, 4, 0, 1, 1)
        self.labelClose = QtWidgets.QLabel(Settings)
        self.labelClose.setObjectName("labelClose")
        self.gridLayout.addWidget(self.labelClose, 2, 0, 1, 1)
        self.shortcutClose = QtWidgets.QKeySequenceEdit(Settings)
        self.shortcutClose.setObjectName("shortcutClose")
        self.gridLayout.addWidget(self.shortcutClose, 2, 1, 1, 1)
        self.shortcutNext = QtWidgets.QKeySequenceEdit(Settings)
        self.shortcutNext.setObjectName("shortcutNext")
        self.gridLayout.addWidget(self.shortcutNext, 3, 1, 1, 1)
        self.shortcutPrevious = QtWidgets.QKeySequenceEdit(Settings)
        self.shortcutPrevious.setObjectName("shortcutPrevious")
        self.gridLayout.addWidget(self.shortcutPrevious, 4, 1, 1, 1)

        self.retranslateUi(Settings)
        self.buttonBox.accepted.connect(Settings.accept)
        self.buttonBox.rejected.connect(Settings.reject)
        QtCore.QMetaObject.connectSlotsByName(Settings)

    def retranslateUi(self, Settings):
        _translate = QtCore.QCoreApplication.translate
        Settings.setWindowTitle(_translate("Settings", "Searchbar Settings"))
        self.shortcutOpenBrowser.setToolTip(_translate("Settings", "<html><head/><body><p>The &quot;Edit Current&quot; window may be in one of two modes: obscure mode, or presentation mode. While in presentation mode, the persistent editor will <span style=\" font-weight:600;\">not</span> obscure the fields, when the card is currently showing the frontside of the card. This shortcut can be triggered in the editor. (default: &quot;Ctrl+P&quot;)</p></body></html>"))
        self.shortcutOpen.setToolTip(_translate("Settings", "<html><head/><body><p>Use this shortcut to flip between the front and the back of a given card. Can be used in the reviewer window. (default: &quot;C&quot;)</p></body></html>"))
        self.labelOpen.setToolTip(_translate("Settings", "<html><head/><body><p>Use this shortcut to flip between the front and the back of a given card. Can be used in the reviewer window. (default: &quot;C&quot;)</p></body></html>"))
        self.labelOpen.setText(_translate("Settings", "Shortcut: Open"))
        self.labelNext.setText(_translate("Settings", "Shortcut: Next occurrence"))
        self.labelOpenBrowser.setToolTip(_translate("Settings", "<html><head/><body><p>The &quot;Edit Current&quot; window may be in one of two modes: obscure mode, or presentation mode. While in presentation mode, the persistent editor will <span style=\" font-weight:600;\">not</span> obscure the fields, when the card is currently showing the frontside of the card. This shortcut can be triggered in the editor. (default: &quot;Ctrl+P&quot;)</p></body></html>"))
        self.labelOpenBrowser.setText(_translate("Settings", "Shortcut: Open (Browser)"))
        self.labelPrevious.setText(_translate("Settings", "Shortcut: Previous occurrence"))
        self.labelClose.setText(_translate("Settings", "Shortcut: Close"))
